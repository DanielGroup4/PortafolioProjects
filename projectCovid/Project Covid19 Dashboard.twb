<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.0821.2225                               -->
<workbook original-version='18.1' source-build='2019.3.0 (20193.19.0821.2225)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts ignorable='true' predowngraded='true' />
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <repository-location id='ProjectCovid19Dashboard' path='/workbooks' revision='1.7' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Table 3 (Tableau Table 3)' inline='true' name='federated.03gfpce1y6q8fy14avo4l1hbakkj' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 3' name='excel-direct.1mmtwnz1czg4yh13nd0ib1eavrv8'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 3.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='Tableau Table 1' name='excel-direct.1vm7h6i0n3c53q1chi77802ugcce'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 1.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='Tableau Table 2' name='excel-direct.1qp4dz90uj2ybx15jft6z0souyt8'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 2.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='Tableau Table 4' name='excel-direct.0gp2pe902xczzu127wvv71mbtxo3'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 4.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1mmtwnz1czg4yh13nd0ib1eavrv8' name='Hoja1' table='[Hoja1$]' type='table'>
          <columns gridOrigin='A1:D238:no:A1:D238:0' header='yes' outcome='6'>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='integer' name='Population' ordinal='1' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='2' />
            <column datatype='real' name='PercentPopulationInfected' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D238:no:A1:D238:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='es_ES' class='hyper' dbname='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Hoja1 (Tableau Table 3).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='11/24/2021 06:16:58 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Hoja1 (Tableau Table 3)' increment-value='%null%' refresh-type='create' rows-inserted='237' timestamp-start='2021-11-24 06:16:58.986' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>0</ordinal>
              <family>Hoja1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>237</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>1</ordinal>
              <family>Hoja1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>236</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount</remote-alias>
              <ordinal>2</ordinal>
              <family>Hoja1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>206</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected</remote-alias>
              <ordinal>3</ordinal>
              <family>Hoja1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>180</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.370098' measure-ordering='alphabetic' measure-percentage='0.629902' show-hidden-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Mexico&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Table 1 (Tableau Table 1)' inline='true' name='federated.09f6dla1ej8vb61527bdu1tp40sp' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='TabTable2_BarChartContinent' name='excel-direct.0nkgu0n08owdk21djagm21rlqkem'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/TabTable2_BarChartContinent.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='TabTable3_mapWorld_PercentPopInfected' name='excel-direct.0ip18m60h8k6rl1bgmtfl0r35dbs'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/TabTable3_mapWorld_PercentPopInfected.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='TabTable4_lineChart_PercentPopInfected' name='excel-direct.021me7c0ox797p1cu0tse18ogwal'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/TabTable4_lineChart_PercentPopInfected.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[PercentPopulationInfected].[continent]' />
              <expression op='[TotalDeathCountPerContinent].[location]' />
            </expression>
          </clause>
          <relation join='inner' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[PercentPopulationInfected].[Location]' />
                <expression op='[PercentPopulationInfected1].[Location]' />
              </expression>
            </clause>
            <relation connection='excel-direct.0ip18m60h8k6rl1bgmtfl0r35dbs' name='PercentPopulationInfected' table='[PercentPopulationInfected$]' type='table'>
              <columns gridOrigin='A1:E225:no:A1:E225:0' header='yes' outcome='6'>
                <column datatype='string' name='continent' ordinal='0' />
                <column datatype='string' name='Location' ordinal='1' />
                <column datatype='integer' name='Population' ordinal='2' />
                <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
                <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
              </columns>
            </relation>
            <relation connection='excel-direct.021me7c0ox797p1cu0tse18ogwal' name='PercentPopulationInfected1' table='[PercentPopulationInfected$]' type='table'>
              <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
                <column datatype='string' name='Location' ordinal='0' />
                <column datatype='integer' name='Population' ordinal='1' />
                <column datatype='date' name='date' ordinal='2' />
                <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
                <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
              </columns>
            </relation>
          </relation>
          <relation connection='excel-direct.0nkgu0n08owdk21djagm21rlqkem' name='TotalDeathCountPerContinent' table='[TotalDeathCountPerContinent$]' type='table'>
            <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
              <column datatype='string' name='location' ordinal='0' />
              <column datatype='integer' name='TotalDeathCount' ordinal='1' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[HighestInfectionCount (PercentPopulationInfected1)]' value='[PercentPopulationInfected1].[HighestInfectionCount]' />
          <map key='[HighestInfectionCount]' value='[PercentPopulationInfected].[HighestInfectionCount]' />
          <map key='[Location (PercentPopulationInfected1)]' value='[PercentPopulationInfected1].[Location]' />
          <map key='[Location]' value='[PercentPopulationInfected].[Location]' />
          <map key='[PercentPopulationInfected (PercentPopulationInfected1)]' value='[PercentPopulationInfected1].[PercentPopulationInfected]' />
          <map key='[PercentPopulationInfected]' value='[PercentPopulationInfected].[PercentPopulationInfected]' />
          <map key='[Population (PercentPopulationInfected1)]' value='[PercentPopulationInfected1].[Population]' />
          <map key='[Population]' value='[PercentPopulationInfected].[Population]' />
          <map key='[TotalDeathCount]' value='[TotalDeathCountPerContinent].[TotalDeathCount]' />
          <map key='[continent]' value='[PercentPopulationInfected].[continent]' />
          <map key='[date]' value='[PercentPopulationInfected1].[date]' />
          <map key='[location]' value='[TotalDeathCountPerContinent].[location]' />
        </cols>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>continent</remote-name>
            <remote-type>130</remote-type>
            <local-name>[continent]</local-name>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias>continent</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected]</local-name>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[PercentPopulationInfected]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E225:no:A1:E225:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location (PercentPopulationInfected1)]</local-name>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population (PercentPopulationInfected1)]</local-name>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>7</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount (PercentPopulationInfected1)]</local-name>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected (PercentPopulationInfected1)]</local-name>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[PercentPopulationInfected1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[TotalDeathCountPerContinent]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeathCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeathCount]</local-name>
            <parent-name>[TotalDeathCountPerContinent]</parent-name>
            <remote-alias>TotalDeathCount</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[TotalDeathCountPerContinent]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B7:no:A1:B7:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.09f6dla1ej8vb61527bdu1tp40sp].[sum:DeathPercentage:qk]&quot;' value='Death Percentage' />
          <alias key='&quot;[federated.09f6dla1ej8vb61527bdu1tp40sp].[sum:total_cases:qk]&quot;' value='Total Cases' />
          <alias key='&quot;[federated.09f6dla1ej8vb61527bdu1tp40sp].[sum:total_deaths:qk]&quot;' value='Total Deaths' />
        </aliases>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='es_ES' class='hyper' dbname='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Table 1 (Tableau Table 1).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='11/25/2021 03:11:32 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[HighestInfectionCount (PercentPopulationInfected1)]' value='[Extract].[HighestInfectionCount]' />
            <map key='[HighestInfectionCount]' value='[Extract].[HighestInfectionCount1]' />
            <map key='[Location (PercentPopulationInfected1)]' value='[Extract].[Location]' />
            <map key='[Location]' value='[Extract].[Location1]' />
            <map key='[PercentPopulationInfected (PercentPopulationInfected1)]' value='[Extract].[PercentPopulationInfected]' />
            <map key='[PercentPopulationInfected]' value='[Extract].[PercentPopulationInfected1]' />
            <map key='[Population (PercentPopulationInfected1)]' value='[Extract].[Population]' />
            <map key='[Population]' value='[Extract].[Population1]' />
            <map key='[TotalDeathCount]' value='[Extract].[TotalDeathCount]' />
            <map key='[continent]' value='[Extract].[continent]' />
            <map key='[date]' value='[Extract].[date]' />
            <map key='[location]' value='[Extract].[location2]' />
          </cols>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='Table 1 (Tableau Table 1)' increment-value='%null%' refresh-type='create' rows-inserted='125881' timestamp-start='2021-11-25 03:11:32.178' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>continent</remote-name>
              <remote-type>129</remote-type>
              <local-name>[continent]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>continent</remote-alias>
              <ordinal>0</ordinal>
              <family>PercentPopulationInfected</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Location1</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location1</remote-alias>
              <ordinal>1</ordinal>
              <family>PercentPopulationInfected</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>372</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population1</remote-alias>
              <ordinal>2</ordinal>
              <family>PercentPopulationInfected</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>372</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount1</remote-alias>
              <ordinal>3</ordinal>
              <family>PercentPopulationInfected</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>240</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected1</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected1</remote-alias>
              <ordinal>4</ordinal>
              <family>PercentPopulationInfected</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>199</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location (PercentPopulationInfected1)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>5</ordinal>
              <family>PercentPopulationInfected1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>372</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population (PercentPopulationInfected1)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>6</ordinal>
              <family>PercentPopulationInfected1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>372</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>7</ordinal>
              <family>PercentPopulationInfected1</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>2649</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount (PercentPopulationInfected1)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount</remote-alias>
              <ordinal>8</ordinal>
              <family>PercentPopulationInfected1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>31401</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected (PercentPopulationInfected1)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected</remote-alias>
              <ordinal>9</ordinal>
              <family>PercentPopulationInfected1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3329</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location2</remote-alias>
              <ordinal>10</ordinal>
              <family>TotalDeathCountPerContinent</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TotalDeathCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[TotalDeathCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TotalDeathCount</remote-alias>
              <ordinal>11</ordinal>
              <family>TotalDeathCountPerContinent</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.463235' measure-ordering='alphabetic' measure-percentage='0.536765' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Mexico&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Table 4 (Tableau Table 4)' inline='true' name='federated.0x993cw1n4me4i19up02v0vadber' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 4' name='excel-direct.1vrq1nz10fyte218u1ub91qimn85'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 4.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation all='true' name='Hoja1+' type='union'>
          <columns header='yes'>
            <column datatype='string' name='Location' />
            <column datatype='integer' name='Population' />
            <column datatype='date' name='date' />
            <column datatype='integer' name='HighestInfectionCount' />
            <column datatype='real' name='PercentPopulationInfected' />
            <column datatype='string' name='Sheet' />
            <column datatype='string' name='Table Name' />
          </columns>
          <relation connection='excel-direct.1vrq1nz10fyte218u1ub91qimn85' name='Hoja1' table='[Hoja1$]' type='table'>
            <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
              <column datatype='string' name='Location' ordinal='0' />
              <column datatype='integer' name='Population' ordinal='1' />
              <column datatype='date' name='date' ordinal='2' />
              <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
              <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sheet</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sheet]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>Sheet</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[Hoja1+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Location]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='date' name='[date]' role='dimension' type='quantitative' />
      <column-instance column='[Location]' derivation='Attribute' name='[attr:Location:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='es_ES' class='hyper' dbname='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Hoja1 (Tableau Table 4).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='11/24/2021 06:02:40 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Hoja1 (Tableau Table 4)' increment-value='%null%' refresh-type='create' rows-inserted='134459' timestamp-start='2021-11-24 06:02:40.766' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>0</ordinal>
              <family>Hoja1+</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>446</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>1</ordinal>
              <family>Hoja1+</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>435</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>2</ordinal>
              <family>Hoja1+</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>2656</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount</remote-alias>
              <ordinal>3</ordinal>
              <family>Hoja1+</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>28496</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected</remote-alias>
              <ordinal>4</ordinal>
              <family>Hoja1+</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3080</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sheet</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sheet]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sheet</remote-alias>
              <ordinal>5</ordinal>
              <family>Hoja1+</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Table Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Table Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Table Name</remote-alias>
              <ordinal>6</ordinal>
              <family>Hoja1+</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.5' show-aliased-fields='true' show-hidden-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:Location:nk]' palette='tableau10_10_0' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Location:nk]' palette='tableau10_10_0' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Mexico&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimación&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='DeathPercentage (TabTable1_slicer_deathPercentage)' inline='true' name='federated.12g4x0f0yygzbq15y2zab1v8o4nq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='TabTable1_slicer_deathPercentage' name='excel-direct.0z2omua09ams6v1bzpjn01tesok5'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/TabTable1_slicer_deathPercentage.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0z2omua09ams6v1bzpjn01tesok5' name='DeathPercentage' table='[DeathPercentage$]' type='table'>
          <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
            <column datatype='integer' name='total_cases' ordinal='0' />
            <column datatype='integer' name='total_deaths' ordinal='1' />
            <column datatype='real' name='DeathPercentage' ordinal='2' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>total_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_cases]</local-name>
            <parent-name>[DeathPercentage]</parent-name>
            <remote-alias>total_cases</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[DeathPercentage]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DeathPercentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DeathPercentage]</local-name>
            <parent-name>[DeathPercentage]</parent-name>
            <remote-alias>DeathPercentage</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[DeathPercentage]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:C2:no:A1:C2:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:DeathPercentage:qk]&quot;' value='Death Percentage' />
          <alias key='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_cases:qk]&quot;' value='Total Cases' />
          <alias key='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_deaths:qk]&quot;' value='Total Deaths' />
        </aliases>
      </column>
      <column datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[total_cases]' role='measure' type='quantitative' />
      <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
      <column-instance column='[DeathPercentage]' derivation='Sum' name='[sum:DeathPercentage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_cases]' derivation='Sum' name='[sum:total_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='es_ES' class='hyper' dbname='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/DeathPercentage (TabTable1_slicer_deathPercentage).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='11/25/2021 03:10:12 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='DeathPercentage (TabTable1_slicer_deathPercentage)' increment-value='%null%' refresh-type='create' rows-inserted='1' timestamp-start='2021-11-25 03:10:12.024' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>total_cases</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_cases]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_cases</remote-alias>
              <ordinal>0</ordinal>
              <family>DeathPercentage</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>total_deaths</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_deaths]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_deaths</remote-alias>
              <ordinal>1</ordinal>
              <family>DeathPercentage</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>DeathPercentage</remote-name>
              <remote-type>5</remote-type>
              <local-name>[DeathPercentage]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>DeathPercentage</remote-alias>
              <ordinal>2</ordinal>
              <family>DeathPercentage</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.39951' measure-ordering='alphabetic' measure-percentage='0.60049' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Mexico&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Table 2 (Tableau Table 2)' inline='true' name='federated.182pe6w1xc973z15orbwj1rob7tn' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 2' name='excel-direct.1dle3qo1kh6lvp19dt0l71cje99v'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Tableau Table 2.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1dle3qo1kh6lvp19dt0l71cje99v' name='Hoja1' table='[Hoja1$]' type='table'>
          <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='TotalDeathCount' ordinal='1' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RMX_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeathCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeathCount]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>TotalDeathCount</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B7:no:A1:B7:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Continent' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='es_ES' class='hyper' dbname='C:/Users/Dael/Documents/1._IT/2_ALL SQL/commited_projects/projectCovid/Hoja1 (Tableau Table 2).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='11/24/2021 05:03:49 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='Hoja1 (Tableau Table 2)' increment-value='%null%' refresh-type='create' rows-inserted='6' timestamp-start='2021-11-24 05:03:49.412' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>0</ordinal>
              <family>Hoja1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LES_RMX_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TotalDeathCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[TotalDeathCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TotalDeathCount</remote-alias>
              <ordinal>1</ordinal>
              <family>Hoja1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.301471' measure-ordering='alphabetic' measure-percentage='0.698529' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' palette='red_10_0' type='palette'>
            <map to='#b71d3e'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#d64c45'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#f0774a'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f4d166'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#f5c75f'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#f9a750'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Mexico&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
      <datasources>
        <datasource caption='Table 3 (Tableau Table 3)' name='federated.03gfpce1y6q8fy14avo4l1hbakkj' />
      </datasources>
      <datasource-dependencies datasource='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
        <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
        <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]'>
        <groupfilter function='level-members' level='[none:Location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' />
      </filter>
    </shared-view>
    <shared-view name='federated.0x993cw1n4me4i19up02v0vadber'>
      <datasources>
        <datasource caption='Table 4 (Tableau Table 4)' name='federated.0x993cw1n4me4i19up02v0vadber' />
      </datasources>
      <datasource-dependencies datasource='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
        <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
        <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.0x993cw1n4me4i19up02v0vadber'>
        <column datatype='string' name='[Location]' role='dimension' type='nominal' />
        <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]'>
        <groupfilter function='level-members' level='[none:Location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' />
      </filter>
    </shared-view>
    <shared-view name='federated.182pe6w1xc973z15orbwj1rob7tn'>
      <datasources>
        <datasource caption='Table 2 (Tableau Table 2)' name='federated.182pe6w1xc973z15orbwj1rob7tn' />
      </datasources>
      <datasource-dependencies datasource='federated.182pe6w1xc973z15orbwj1rob7tn'>
        <column caption='Continent' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
        <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]'>
        <groupfilter from='&quot;Africa&quot;' function='range' level='[none:location:nk]' to='&quot;South America&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
        <target field='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Resaltado 1 (generado)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='LineChart' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Location' />
        <param name='target' value='LineChart' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='GlobalMap'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#c83457'>Percent Polulation Iinfected per Country</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Table 3 (Tableau Table 3)' name='federated.03gfpce1y6q8fy14avo4l1hbakkj' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[PercentPopulationInfected]' derivation='Sum' name='[sum:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population]' derivation='Sum' name='[sum:Population:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:Population:qk]' included-values='all' />
          <slices>
            <column>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]</column>
            <column>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:Population:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Longitude (generated)]' field-type='quantitative' max='56935740.820542611' min='19672032.736777939' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]' field-type='quantitative' max='16732617.295606323' min='-7183907.476843847' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
            <format attr='tick-color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]' value='#ffffff' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='color' data-class='total' scope='cols' value='#c0c0c0' />
            <format attr='color' data-class='subtotal' scope='cols' value='#c0c0c0' />
            <format attr='color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' value='#000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]' value='#c0c0c0' />
            <format attr='background-color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' value='#ffffff' />
            <format attr='background-color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Longitude (generated)]' value='#ffffff' />
            <format attr='background-color' scope='cols' value='#000000' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' value='bold' />
            <format attr='color' scope='cols' value='#c0c0c0' />
            <format attr='font-family' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]' value='Franklin Gothic Demi Cond' />
            <format attr='color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]' value='#898989' />
            <format attr='color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' value='#333333' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
            <format attr='background-color' value='#000000' />
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='color' value='#666666' />
            <format attr='in-tooltip' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='font-family' value='Franklin Gothic Demi Cond' />
            <format attr='background-color' value='#ffffff' />
            <format attr='color' value='#000000' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='font-family' value='Franklin Gothic Demi Cond' />
            <format attr='color' value='#000000' />
            <format attr='font-weight' value='normal' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' value='Percent Population Infected' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='admin-3-4-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-3-4-boundaries' value='true' />
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='admin-2-boundaries offset' value='true' />
            <format attr='enabled' id='admin-2-boundaries-dispute' value='true' />
            <format attr='enabled' id='state-label-sm' value='true' />
            <format attr='enabled' id='state-label-md' value='true' />
            <format attr='enabled' id='state-label-lg' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.090000003576278687' />
            <format attr='map-style' value='satellite' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' />
              <lod column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' />
              <geometry column='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.42779004573822021' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Latitude (generated)]</rows>
        <cols>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{B91D4C07-14FB-4181-AA99-F292B11CA1A9}' />
    </worksheet>
    <worksheet name='LineChart'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#c83457'>Percent Population Infected</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Table 4 (Tableau Table 4)' name='federated.0x993cw1n4me4i19up02v0vadber' />
            <datasource caption='Table 3 (Tableau Table 3)' name='federated.03gfpce1y6q8fy14avo4l1hbakkj' />
          </datasources>
          <datasource-dependencies datasource='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0x993cw1n4me4i19up02v0vadber'>
            <column datatype='string' name='[Location]' role='dimension' type='nominal' />
            <column datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
            <column-instance column='[PercentPopulationInfected]' derivation='Avg' name='[avg:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
            <column datatype='date' name='[date]' role='dimension' type='quantitative' />
            <column-instance column='[date]' derivation='Max' name='[max:date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[date]' derivation='None' name='[none:date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PercentPopulationInfected]' derivation='Sum' name='[sum:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Week-Trunc' name='[twk:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]'>
            <groupfilter from='&quot;Afghanistan&quot;' function='range' level='[none:Location:nk]' to='&quot;Zimbabwe&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0x993cw1n4me4i19up02v0vadber].[none:date:qk]' included-values='in-range-or-null'>
            <min>#2020-12-25#</min>
            <max>#2021-11-19#</max>
          </filter>
          <slices>
            <column>[federated.0x993cw1n4me4i19up02v0vadber].[none:date:qk]</column>
            <column>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]</column>
            <column>[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0x993cw1n4me4i19up02v0vadber].[sum:PercentPopulationInfected:qk]' scope='rows' value='Percent Population Infected' />
            <format attr='height' field='[federated.0x993cw1n4me4i19up02v0vadber].[twk:date:qk]' value='57' />
            <format attr='title' class='0' field='[federated.0x993cw1n4me4i19up02v0vadber].[twk:date:qk]' scope='cols' value='Date' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0x993cw1n4me4i19up02v0vadber].[twk:date:qk]' value='307' />
            <format attr='vertical-align' field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' value='auto' />
            <format attr='wrap' field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' value='auto' />
            <format attr='text-align' field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' value='auto' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' value='9' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='color' value='#ffffff' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-size' value='0' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' value='1' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='color' value='#000000' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' value='Color per Country'>
              <formatted-text>
                <run>Color per Country</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='color' value='#000000' />
            <format attr='border-style' value='solid' />
            <format attr='border-width' value='3' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='color' value='#1b1b1b' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' />
              <text column='[federated.0x993cw1n4me4i19up02v0vadber].[avg:PercentPopulationInfected:qk]' />
              <color column='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' />
            </encodings>
            <label-data column='[federated.0x993cw1n4me4i19up02v0vadber].[max:date:qk]' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Location:&#9;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Día de date:&#9;</run>
                <run bold='true'>&lt;[federated.0x993cw1n4me4i19up02v0vadber].[twk:date:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Prom. PercentPopulationInfected:&#9;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>PercentPopulationInfected:&#9;</run>
              </formatted-text>
            </customized-tooltip>
            <customized-label>
              <formatted-text>
                <run fontalignment='0'>&lt;</run>
                <run fontalignment='0'>[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]</run>
                <run fontalignment='0'>&gt; &lt;</run>
                <run fontalignment='0'>[federated.0x993cw1n4me4i19up02v0vadber].[avg:PercentPopulationInfected:qk]</run>
                <run fontalignment='0'>&gt;&#10;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='wrap' value='auto' />
                <format attr='vertical-align' value='auto' />
                <format attr='text-align' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-weight' value='normal' />
                <format attr='font-family' value='Franklin Gothic Demi Cond' />
                <format attr='font-size' value='8' />
                <format attr='color' value='#000000' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-line-first' value='true' />
                <format attr='size' value='0.64767956733703613' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-range-scope' value='cell' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-mode' value='most-recent' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='877' />
                <format attr='maxwidth' value='877' />
                <format attr='minheight' value='414' />
                <format attr='maxheight' value='414' />
                <format attr='aspect' value='0' />
                <format attr='minwidth' value='877' />
                <format attr='maxwidth' value='877' />
                <format attr='minheight' value='414' />
                <format attr='maxheight' value='414' />
                <format attr='aspect' value='0' />
                <format attr='minwidth' value='877' />
                <format attr='maxwidth' value='877' />
                <format attr='minheight' value='414' />
                <format attr='maxheight' value='414' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0x993cw1n4me4i19up02v0vadber].[sum:PercentPopulationInfected:qk]</rows>
        <cols>[federated.0x993cw1n4me4i19up02v0vadber].[twk:date:qk]</cols>
        <table-calculations>
          <partitionable-measures>
            <column>[federated.0x993cw1n4me4i19up02v0vadber].[attr:Forecast Indicator:nk]</column>
            <column>[federated.0x993cw1n4me4i19up02v0vadber].[avg:PercentPopulationInfected:ok]</column>
          </partitionable-measures>
        </table-calculations>
        <page-trail-options enabled='true' />
      </table>
      <simple-id uuid='{8B1198B2-BB32-4E9E-A47A-F0994C00D439}' />
    </worksheet>
    <worksheet name='barChar'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#c83457'>Total Deaths per Continent</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Table 2 (Tableau Table 2)' name='federated.182pe6w1xc973z15orbwj1rob7tn' />
          </datasources>
          <datasource-dependencies datasource='federated.182pe6w1xc973z15orbwj1rob7tn'>
            <column datatype='integer' name='[TotalDeathCount]' role='measure' type='quantitative' />
            <column caption='Continent' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[TotalDeathCount]' derivation='Sum' name='[sum:TotalDeathCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Europe&quot;</bucket>
              <bucket>&quot;Asia&quot;</bucket>
              <bucket>&quot;South America&quot;</bucket>
              <bucket>&quot;North America&quot;</bucket>
              <bucket>&quot;Africa&quot;</bucket>
              <bucket>&quot;Oceania&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.182pe6w1xc973z15orbwj1rob7tn].[sum:TotalDeathCount:qk]' field-type='quantitative' max='1500000' min='0' range-type='fixed' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.182pe6w1xc973z15orbwj1rob7tn].[sum:TotalDeathCount:qk]' scope='rows' value='Total Death Count' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' value='94' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='background-color' value='#000000' />
            <format attr='color' value='#ffffff' />
            <format attr='border-style' value='solid' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='color' value='#000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.3843094110488892' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.182pe6w1xc973z15orbwj1rob7tn].[sum:TotalDeathCount:qk]</rows>
        <cols>[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{5EA5B948-08EC-4F5F-BE1D-62F65BABB774}' />
    </worksheet>
    <worksheet name='slicer'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#c83457'>Global Numbers</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='DeathPercentage (TabTable1_slicer_deathPercentage)' name='federated.12g4x0f0yygzbq15y2zab1v8o4nq' />
          </datasources>
          <datasource-dependencies datasource='federated.12g4x0f0yygzbq15y2zab1v8o4nq'>
            <column datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
            <column-instance column='[DeathPercentage]' derivation='Sum' name='[sum:DeathPercentage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_cases]' derivation='Sum' name='[sum:total_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_cases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_cases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:DeathPercentage:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_cases:qk]&quot;</bucket>
              <bucket>&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:total_deaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:DeathPercentage:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='20' />
            <format attr='width' field='[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]' value='127' />
            <format attr='text-align' value='center' />
            <format attr='text-format' field='[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[sum:DeathPercentage:qk]' value='n#,##0.0000;-#,##0.0000' />
            <format attr='color' data-class='subtotal' scope='rows' value='#ffffff' />
          </style-rule>
          <style-rule element='header'>
            <format attr='color' data-class='total' value='#333333' />
            <format attr='background-color' scope='cols' value='#c83457' />
            <format attr='color' data-class='total' scope='rows' value='#ffffff' />
            <format attr='background-color' scope='rows' value='#d4d4d4' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' scope='rows' value='#ffffff' />
            <format attr='color' scope='cols' value='#ffffff' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' value='#d4d4d4' />
            <format attr='background-color' data-class='subtotal' scope='rows' value='#000000' />
            <format attr='background-color' data-class='total' scope='cols' value='#000000' />
            <format attr='band-color' scope='cols' value='#000000' />
            <format attr='background-color' data-class='subtotal' scope='cols' value='#000000' />
            <format attr='band-color' scope='rows' value='#c0c0c0' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#ffffff' />
            <format attr='band-size' scope='rows' value='5' />
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='solid' />
            <format attr='stroke-color' value='#000000' />
            <format attr='stroke-size' value='1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6151933670043945' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{8188D1DF-504C-4021-8E75-02058D9F5298}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='Table 3 (Tableau Table 3)' name='federated.03gfpce1y6q8fy14avo4l1hbakkj' />
        <datasource caption='Table 4 (Tableau Table 4)' name='federated.0x993cw1n4me4i19up02v0vadber' />
        <datasource caption='Table 2 (Tableau Table 2)' name='federated.182pe6w1xc973z15orbwj1rob7tn' />
      </datasources>
      <datasource-dependencies datasource='federated.03gfpce1y6q8fy14avo4l1hbakkj'>
        <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
        <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.0x993cw1n4me4i19up02v0vadber'>
        <column datatype='date' name='[date]' role='dimension' type='quantitative' />
        <column-instance column='[date]' derivation='None' name='[none:date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.182pe6w1xc973z15orbwj1rob7tn'>
        <column caption='Continent' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
        <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97342' id='135' param='horz' type='layout-flow' w='98612' x='694' y='1329'>
            <zone fixed-size='976' h='97342' id='133' is-fixed='true' type='layout-basic' w='84649' x='694' y='1329'>
              <zone h='17110' id='166' name='slicer' w='36427' x='694' y='1329'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='36379' id='181' name='LineChart' w='84649' x='694' y='62292'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='60963' id='132' name='GlobalMap' w='48222' x='37121' y='1329'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='43853' id='138' name='barChar' w='36427' x='694' y='18439'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone h='97342' id='134' param='vert' type='layout-flow' w='13963' x='85343' y='1329'>
              <zone h='12459' id='136' mode='slider' name='GlobalMap' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' type='filter' w='13963' x='85343' y='1329'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='9801' id='137' name='GlobalMap' pane-specification-id='0' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' type='color' w='13963' x='85343' y='13788'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='28738' id='139' name='barChar' param='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' type='filter' w='13963' x='85343' y='23589'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='13455' id='183' name='LineChart' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:date:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='13963' x='85343' y='52327'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='32889' id='184' name='LineChart' pane-specification-id='4' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' type='color' w='13963' x='85343' y='65782'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1350' minheight='1350' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='203' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='97342' id='204' param='vert' type='layout-flow' w='98612' x='694' y='1329'>
                <zone fixed-size='129' h='17110' id='166' is-fixed='true' name='slicer' w='36427' x='694' y='1329'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='12459' id='136' mode='slider' name='GlobalMap' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' type='filter' w='13963' x='85343' y='1329'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='60963' id='132' is-fixed='true' name='GlobalMap' w='48222' x='37121' y='1329'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9801' id='137' name='GlobalMap' pane-specification-id='0' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' type='color' w='13963' x='85343' y='13788'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='28738' id='139' mode='checkdropdown' name='barChar' param='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' type='filter' w='13963' x='85343' y='23589'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='43853' id='138' is-fixed='true' name='barChar' w='36427' x='694' y='18439'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='13455' id='183' name='LineChart' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:date:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='13963' x='85343' y='52327'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='36379' id='181' is-fixed='true' name='LineChart' w='84649' x='694' y='62292'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='32889' id='184' name='LineChart' pane-specification-id='4' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' type='color' w='13963' x='85343' y='65782'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B3E65FC3-64D7-4F6C-A64D-643D072D5EBD}' />
    </dashboard>
  </dashboards>
  <windows source-height='114'>
    <window class='worksheet' name='slicer'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09f6dla1ej8vb61527bdu1tp40sp].[:Measure Names]</field>
            <field>[federated.12g4x0f0yygzbq15y2zab1v8o4nq].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3C77EB9E-0CDB-4D72-A6B2-74D4841E02AA}' />
    </window>
    <window class='worksheet' name='barChar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card param='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.182pe6w1xc973z15orbwj1rob7tn].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D7169872-2762-46E5-BD19-26D634DBF711}' />
    </window>
    <window class='worksheet' name='GlobalMap'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card mode='checkdropdown' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.03gfpce1y6q8fy14avo4l1hbakkj].[sum:PercentPopulationInfected:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.03gfpce1y6q8fy14avo4l1hbakkj].[none:Location:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{02F129EE-32F1-4FB8-881E-726CE526E732}' />
    </window>
    <window class='worksheet' name='LineChart'>
      <cards>
        <edge name='left'>
          <strip size='139'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card mode='checkdropdown' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' type='filter' />
            <card param='[federated.0x993cw1n4me4i19up02v0vadber].[none:date:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='4' param='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]' show-title='false' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;Mexico&quot;</bucket>
          </multibucket>
        </current-page>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0x993cw1n4me4i19up02v0vadber].[attr:Forecast Indicator:nk]</field>
            <field>[federated.0x993cw1n4me4i19up02v0vadber].[attr:Location:nk]</field>
            <field>[federated.0x993cw1n4me4i19up02v0vadber].[fVal:avg:PercentPopulationInfected:ok]</field>
            <field>[federated.0x993cw1n4me4i19up02v0vadber].[none:Forecast Indicator:nk]</field>
            <field>[federated.0x993cw1n4me4i19up02v0vadber].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2029D81A-B3C7-44CB-A181-8BDD43056ABF}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='GlobalMap'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='LineChart'>
          <current-page>
            <multibucket>
              <bucket>&quot;Mexico&quot;</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
          <highlight field='[federated.0x993cw1n4me4i19up02v0vadber].[none:Location:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='barChar'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='slicer' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{227523F6-33FF-46F8-A542-3114E3995044}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      UYAdPtD8/9B1jCo0HzSkAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='GlobalMap' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='LineChart' width='192'>
      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
      RsGIBgB8EKKEq3BUcwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='barChar' width='192'>
      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
    </thumbnail>
    <thumbnail height='44' name='slicer' width='192'>
      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
      kvtiAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
